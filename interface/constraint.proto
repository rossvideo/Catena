/*Copyright 2024 Ross Video Ltd
*
* Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
*
* 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
*
* 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
*
* 3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.
*
* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES, 
* INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
* INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
* CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */

syntax = "proto3";

package catena;

import "language.proto";

option java_multiple_files = true;
option java_package = "catena.core.constraint";
option java_outer_classname = "ConstraintProtos";

option optimize_for = OPTIMIZE_FOR;



message Alarm {
  int32 bit_value = 1; // range 0 to 31

  /* The severity of an Alarm. */
  enum Severity {
    INFO = 0;
    WARNING = 1;
    SEVERE = 2;
    UNKNOWN = 3;
    REFUSED = 4;
  }
  Severity severity = 2;

  /* Message to display in client GUI */
  PolyglotText description = 3;
}

/* Alarm Table. Comprises a number of different Alarms. */
message AlarmTableConstraint {
  repeated Alarm alarms = 1;
}

/* Codes integers for display in client GUI as values or members of a pick list. */
message Int32ChoiceConstraint {
  message IntChoice {
    int32 value = 1;
    PolyglotText name = 2;
  }
  repeated IntChoice choices = 1;
}

/* Range constraint including hard min & max values plus display min & max. */
message Int32RangeConstraint {
  int32 min_value = 1;
  int32 max_value = 2;
  int32 step = 3;
  int32 display_min = 4;
  int32 display_max = 5;
}

/* Range constraint with hard min & max plus display min & max. */
message FloatRangeConstraint {
  float min_value = 1;
  float max_value = 2;
  float step = 3;
  float display_min = 4;
  float display_max = 5;
}

/* A selection of strings for client GUI to use in pick list and other GUI elements. */
message StringChoiceConstraint {
  repeated string choices = 1;
  bool strict = 2;
}

/* A selection of human-friendly strings to display in client GUI that are
 * used to select a string intended for machine use. */
message StringStringChoiceConstraint {
  message StringStringChoice {
    string value = 1;
    PolyglotText name = 2;
  }
  repeated StringStringChoice choices = 1;
  bool strict = 2;
}

message Constraint {
  enum ConstraintType {
    UNDEFINED = 0;
    INT_RANGE = 2;
    FLOAT_RANGE = 4;
    INT_CHOICE = 5;
    STRING_CHOICE = 6;
    STRING_STRING_CHOICE = 7;
    ALARM_TABLE = 8;
  }

  ConstraintType type = 1;
  oneof kind {
    /* A reference to a shared constraint defined in device.constraints */
    string ref_oid = 2;

    /* Int32 Constraints */
    AlarmTableConstraint alarm_table = 3;
    Int32RangeConstraint int32_range = 4;
    Int32ChoiceConstraint int32_choice = 5;

    /* Float Constraints */
    FloatRangeConstraint float_range = 6;

    /* String Constraints */
    StringChoiceConstraint string_choice = 7;
    StringStringChoiceConstraint string_string_choice = 8;
  }
}

