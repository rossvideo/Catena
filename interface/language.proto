/*Copyright 2024 Ross Video Ltd
*
* Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
*
* 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
*
* 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
*
* 3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.
*
* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, 
* INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
* INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
* CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */



syntax = "proto3";

package catena;

option java_multiple_files = true;
option java_package = "catena.core.language";
option java_outer_classname = "LanguageProtos";

option optimize_for = SPEED;

/* Language Pack
 * A map of string identifiers, e.g. "greeting" to strings which are all
 * in the same language. */
message LanguagePack {
  string name = 1;               // e.g. "Global Spanish"
  map<string, string> words = 2; // e.g. "greeting" -> "Hola"
}

/* Language Packs
 * A map of language identifiers to resource dictionaries or language packs
 * for each language supported.
 * The keys shall be patterned on those defined in
 * https://www.mesaonline.org/language-metadata-table, e.g.
 * "es" for Global Spanish.
 * "es-CO" for Colombian Spanish.
 * "pl" for Jezyk polski */
message LanguagePacks {
  map<string, LanguagePack> packs = 1;
}

/* PolyglotText
 * Text that a client can display in one of multiple languages.
 * The different options can either be defined in-line for each
 * instance of this message, or they can reference a LanguagePack.
 *
 * When defined in-line, the keys shall be patterned on those defined at
 * https://www.mesaonline.org/language-metadata-table with "example"
 * substituted by "catena".
 *
 * In-line definition example:
 * {
 *    "en": "Hello",   // global English
 *    "es": "Hola",    // global Spanish
 *    "fr": "Bonjour", // global French
 *    "en-CA": "Eh?",  // Canadian English
 * },
 *
 * LanguagePack referencing example:
 * {
 *    "$key": "greeting"
 * }
 * 
 *
 * And when defined by reference to a language pack the $key value
 * is used to provide a look-up into the supported LanguagePack(s)
 * e.g. $key = "greeting" could index to "Hello", "Hola" or "Bonjour"
 * depending on which LanguagePack was active in the client. */
message PolyglotText {
  map<string, string> display_strings = 1; // In-line language definition
}

/* AddLanguagePayload
 * Used by a client to request that a device adds support for a language pack. */
message AddLanguagePayload {
  uint32 slot = 1;
  LanguagePack language_pack = 2;
  string id = 3;                  // e.g. "es" Global Spanish.
}

/* LanguagePackRequestPayload
 * Requests a language pack from the device. */
message LanguagePackRequestPayload {
  uint32 slot = 1;     // Uniquely identifies the device at node scope.
  string language = 2; // e.g. "es" Global Spanish.
}

/* Language List
 * The list of language tags that the device supports.
 *
 * e.g.
 * [
 *    "en",
 *    "es",
 *    "fr"
 * ] // Support for English, Spanish & French
 *
 * e.g.
 * [] // No multi-lingual support */
message LanguageList {
  repeated string languages = 1;
}

/**
 * Slot
 */
message Slot {
  uint32 slot = 1;
}
