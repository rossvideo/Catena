/* Copyright Â© 2023 Ross Video Limited, All Rights Reserved.
 * 
 * Licensed under the Creative Commons Attribution NoDerivatives 4.0
 * International Licensing (CC-BY-ND-4.0);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at:
 * 
 * https://creativecommons.org/licenses/by-nd/4.0/
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License. */

syntax = "proto3";

/* change this to the smpte doc name once a st-# has been assigned
 * for example smpte_st_major_minor_year */
package catena;

option java_multiple_files = true;
option java_package = "catena.core.service";
option java_outer_classname = "CatenaCore";

option optimize_for = CODE_SIZE;

import "google/protobuf/empty.proto";
import "device.proto";
import "param.proto";
import "language.proto";
import "externalobject.proto";

/* Catena's API */

message GeneralRequest {
  int32 slot = 1;
}

/* TODO DO WE NEED THIS OR SHOULD WE MOVE IT INTO LANGUAGE */
message GeneralResponse {
  int32 return_code = 1;    // 0 indicates success, non-zero a problem
  Exception exception = 2;  // Explains non-zero return codes
}

service CatenaService {
  rpc DeviceRequest(DeviceRequestPayload) returns (stream DeviceComponent);

  rpc GetPopulatedSlots(google.protobuf.Empty) returns (SlotList);

  rpc ExecuteCommand(stream ExecuteCommandPayload) returns (stream CommandResponse);

  rpc ExternalObjectRequest(ExternalObjectRequestPayload) returns (stream ExternalObjectPayload);

  rpc BasicParamInfoRequest(BasicParamInfoRequestPayload) returns (stream BasicParamInfoResponse);

  rpc SetValue(SetValuePayload) returns (google.protobuf.Empty);

  rpc GetValue(GetValuePayload) returns (Value);

  rpc MultiSetValue(MultiSetValuePayload) returns (google.protobuf.Empty);

  rpc UpdateSubscriptions(UpdateSubscriptionsPayload) returns (stream DeviceComponent.ComponentParam);

  rpc GetParam(GetParamPayload) returns (stream DeviceComponent.ComponentParam);

  /* The stream of PushUpdates is open-ended, terminating only when the
   * logical connection with the client is terminated. */
  rpc Connect(ConnectPayload) returns (stream PushUpdates);

  /* Multi-language support */
  rpc AddLanguage(AddLanguagePayload) returns (GeneralResponse); // Optional capability to allow clients to provide additional language packs

  rpc LanguagePackRequest(LanguagePackRequestPayload) returns (DeviceComponent.ComponentLanguagePack);

  rpc ListLanguages(GeneralRequest) returns (LanguageList);
}
