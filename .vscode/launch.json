{
    "version": "0.2.0",
    "configurations": [
      {
        "type": "cppdbg",
        "name": "Debug use_structs with lldb",
        "request": "launch",
        "program": "${workspaceFolder}/sdks/cpp/build/common/examples/use_structs/use_structs",
        "args": [],
        "cwd": "${workspaceFolder}/sdks/cpp/build",
        "preLaunchTask": "",
        "externalConsole": true,
        "MIMode": "lldb"
      },
      {
        "type": "cppdbg",
        "name": "Debug start_here with lldb",
        "request": "launch",
        "program": "${workspaceFolder}/sdks/cpp/build/common/examples/start_here/start_here",
        "args": [],
        "cwd": "${workspaceFolder}/sdks/cpp/build",
        "preLaunchTask": "",
        "externalConsole": true,
        "MIMode": "lldb"
      },
      {
        "type": "cppdbg",
        "name": "Debug Full Service with lldb",
        "request": "launch",
        "program": "${workspaceFolder}/sdks/cpp/build/common/examples/full_service/full_service",
        "args": ["--device_model", "${workspaceFolder}/example_device_models/device.one_of_everything.json"],
        "cwd": "${workspaceFolder}/sdks/cpp/build",
        "preLaunchTask": "",
        "externalConsole": true,
        "MIMode": "lldb"
      },
      {
        "type": "cppdbg",
        "name": "Debug status_update with lldb",
        "request": "launch",
        "program": "${workspaceFolder}/sdks/cpp/build/connections/gRPC/examples/status_update/status_update",
        "args": ["--static_root", "${workspaceFolder}/sdks/cpp/connections/gRPC/examples/status_update/static"],
        "cwd": "${workspaceFolder}/sdks/cpp/build",
        "preLaunchTask": "",
        "externalConsole": true,
        "MIMode": "lldb"
      },
      {
        "type": "cppdbg",
        "name": "Debug Basic Param Access with lldb",
        "request": "launch",
        "program": "${workspaceFolder}/sdks/cpp/build/common/examples/basic_param_access/basic_param_access",
        "args": ["${workspaceFolder}/example_device_models/device.minimal.json"],
        "cwd": "${workspaceFolder}/sdks/cpp/build",
        "preLaunchTask": "",
        "externalConsole": true,
        "MIMode": "lldb"
      },
      {
        "name": "Debug examples with gdb",
        "type": "cppdbg",
        "request": "launch",
        "program": "${workspaceFolder}/sdks/cpp/build/${input:pickExample}", // Path to the full_service executable
        "args": [], // Any command-line arguments go here
        "stopAtEntry": false,
        "cwd": "${workspaceFolder}",
        "environment": [],
        "externalConsole": false,
        "MIMode": "gdb",
        "setupCommands": [
            {
                "description": "Enable pretty-printing for gdb",
                "text": "-enable-pretty-printing",
                "ignoreFailures": true
            }
        ]
    },
      {
        "name": "Debug service with gdb",
        "type": "cppdbg",
        "request": "launch",
        "program": "${workspaceFolder}/sdks/cpp/build/connections/gRPC/examples/${input:pickService}/${input:pickService}", // Path to the full_service executable
        "args": ["--static_root", "${workspaceFolder}/sdks/cpp/connections/gRPC/examples/${input:pickService}/static"], // Any command-line arguments go here
        "stopAtEntry": false,
        "cwd": "${workspaceFolder}",
        "environment": [],
        "externalConsole": false,
        "MIMode": "gdb",
        "setupCommands": [
            {
                "description": "Enable pretty-printing for gdb",
                "text": "-enable-pretty-printing",
                "ignoreFailures": true
            }
        ]
    },
    {
      "type": "node",
      "request": "launch",
      "name": "Debug Codegen",
      "skipFiles": [
          "<node_internals>/**"
      ],
      "program": "${workspaceFolder}/tools/codegen/index.js",
      "args": [
          "--schema",
          "${workspaceFolder}/schema",
          "--device-model",
          "${workspaceFolder}/sdks/cpp/${input:pickDeviceModel}",
          "--output",
          "${workspaceFolder}/sdks/cpp/build/${input:pickDeviceModel}/..",
          "--language",
          "cpp"
      ],
    }
  ],
  "inputs": [
    {
      "id": "pickDeviceModel",
      "description": "Select device model to generate code for",
      "type": "pickString",
      "options": ["common/examples/start_here/device.start_here.json", 
                  "common/examples/use_structs/device.use_structs.json",
                  "common/examples/use_templates/device.use_templates.json",
                  "common/examples/use_constraints/device.use_constraints.json",
                  "common/examples/use_struct_arrays/device.AudioDeck.json",
                  "common/examples/import_params/device.import_params.json",
                  "common/examples/use_variants/device.use_variants.json",
                  "connections/gRPC/examples/status_update/device.status_update.json",
                  "connections/gRPC/examples/structs_with_authz/device.AudioDeck.json",
                  "connections/gRPC/examples/use_commands/device.video_player.json"
                ],
      "default": "common/examples/start_here/device.start_here.json"
    },
    {
      "id": "pickService",
      "description": "Select service to run",
      "type": "pickString",
      "options": ["status_update",
                  "structs_with_authz",
                  "use_commands"
                ],
      "default": "status_update"
    },
    {
      "id": "pickExample",
      "description": "Select example to run",
      "type": "pickString",
      "options": ["common/examples/start_here/start_here",
                  "common/examples/use_structs/use_structs",
                  "common/examples/use_templates/use_templates",
                  "common/examples/use_constraints/use_constraints",
                  "common/examples/use_struct_arrays/use_struct_arrays",
                  "common/examples/use_variants/use_variants",
                ],
      "default": "common/examples/start_here/start_here"
    }
  ]

}