{
    "version": "0.2.0",
    "configurations": [   
      {
        "type": "cppdbg",
        "name": "Debug api_only with lldb",
        "request": "launch",
        "program": "${workspaceFolder}/${env:BUILD_TARGET}/connections/REST/examples/api_only/api_only",
        "args": [],
        "cwd": "${workspaceFolder}/${env:BUILD_TARGET}",
        "preLaunchTask": "",
        "externalConsole": true,
        "MIMode": "lldb"
      },
      {
        "type": "cppdbg",
        "name": "Debug use_structs with lldb",
        "request": "launch",
        "program": "${workspaceFolder}/${env:BUILD_TARGET}/common/examples/use_structs/use_structs",
        "args": [],
        "cwd": "${workspaceFolder}/${env:BUILD_TARGET}",
        "preLaunchTask": "",
        "externalConsole": true,
        "MIMode": "lldb"
      },
      {
        "type": "cppdbg",
        "name": "Debug start_here with lldb",
        "request": "launch",
        "program": "${workspaceFolder}/${env:BUILD_TARGET}/common/examples/start_here/start_here",
        "args": [],
        "cwd": "${workspaceFolder}/${env:BUILD_TARGET}",
        "preLaunchTask": "",
        "externalConsole": true,
        "MIMode": "lldb"
      },
      {
        "type": "cppdbg",
        "name": "Debug Full Service with lldb",
        "request": "launch",
        "program": "${workspaceFolder}/${env:BUILD_TARGET}/common/examples/full_service/full_service",
        "args": ["--device_model", "${workspaceFolder}/example_device_models/device.one_of_everything.json"],
        "cwd": "${workspaceFolder}/${env:BUILD_TARGET}",
        "preLaunchTask": "",
        "externalConsole": true,
        "MIMode": "lldb"
      },
      {
        "type": "cppdbg",
        "name": "Debug status_update with lldb",
        "request": "launch",
        "program": "${workspaceFolder}/${env:BUILD_TARGET}/connections/gRPC/examples/status_update/status_update",
        "args": ["--static_root", "${workspaceFolder}/sdks/cpp/connections/gRPC/examples/status_update/static"],
        "cwd": "${workspaceFolder}/${env:BUILD_TARGET}",
        "preLaunchTask": "",
        "externalConsole": true,
        "MIMode": "lldb"
      },
      {
        "type": "cppdbg",
        "name": "Debug Basic Param Access with lldb",
        "request": "launch",
        "program": "${workspaceFolder}/${env:BUILD_TARGET}/common/examples/basic_param_access/basic_param_access",
        "args": ["${workspaceFolder}/example_device_models/device.minimal.json"],
        "cwd": "${workspaceFolder}/${env:BUILD_TARGET}",
        "preLaunchTask": "",
        "externalConsole": true,
        "MIMode": "lldb"
      },
      {
        "name": "Debug examples with gdb",
        "type": "cppdbg",
        "request": "launch",
        "program": "${workspaceFolder}/${env:BUILD_TARGET}/${input:pickExample}", // Path to the full_service executable
        "args": [], // Any command-line arguments go here
        "stopAtEntry": false,
        "cwd": "${workspaceFolder}",
        "environment": [],
        "externalConsole": false,
        "MIMode": "gdb",
        "setupCommands": [
            {
                "description": "Enable pretty-printing for gdb",
                "text": "-enable-pretty-printing",
                "ignoreFailures": true
            }
        ]
    },
      {
        "name": "Debug gRPC service with gdb",
        "type": "cppdbg",
        "request": "launch",
        "program": "${workspaceFolder}/${env:BUILD_TARGET}/connections/gRPC/examples/${input:pickService}/${input:pickService}", // Path to the full_service executable
        "args": ["--static_root", "${workspaceFolder}/sdks/cpp/connections/gRPC/examples/${input:pickService}/static", 
                //  "--secure_comms", "tls",
                "--authz"
        ], // Any command-line arguments go here
        "stopAtEntry": false,
        "cwd": "${workspaceFolder}/${env:BUILD_TARGET}",
        "environment": [],
        "externalConsole": false,
        "MIMode": "gdb",
        "setupCommands": [
            {
                "description": "Enable pretty-printing for gdb",
                "text": "-enable-pretty-printing",
                "ignoreFailures": true
            }
        ]
    },
    {
      "type": "node",
      "request": "launch",
      "name": "Debug Codegen",
      "skipFiles": [
          "<node_internals>/**"
      ],
      "program": "${workspaceFolder}/tools/codegen/index.js",
      "args": [
          "--schema",
          "${workspaceFolder}/smpte/interface/schemata/device.json",
          "--device-model",
          "${workspaceFolder}/sdks/cpp/${input:pickDeviceModel}",
          "--output",
          "${workspaceFolder}/${env:BUILD_TARGET}/${input:pickDeviceModel}/..",
          "--language",
          "cpp"
      ],
    },
    {
      "name": "Debug Unit Tests with GDB",
      "type": "cppdbg",
      "request": "launch",
      "program": "${workspaceFolder}/${env:BUILD_TARGET}/${input:pickTestExecutable}",
      "args": [],
      "stopAtEntry": false,
      "cwd": "${workspaceFolder}/${env:BUILD_TARGET}",
      "environment": [],
      "externalConsole": false,
      "MIMode": "gdb",
      "setupCommands": [
          {
              "description": "Enable pretty-printing for gdb",
              "text": "-enable-pretty-printing",
              "ignoreFailures": true
          }
      ],
      "preLaunchTask": "",
      "miDebuggerPath": "/usr/bin/gdb"
    },
    {
      "name": "Debug REST service with GDB",
      "type": "cppdbg",
      "request": "launch",
      "program": "${workspaceFolder}/${env:BUILD_TARGET}/connections/REST/examples/${input:pickRestService}/${input:pickRestService}",
      "args": [
        "--static_root", "${workspaceFolder}/sdks/cpp/connections/REST/examples/${input:pickRestService}/static",
        //  "--secure_comms", "tls", // Unsure if this is functional
        "--authz",
        "--port=6254"
      ],
      "stopAtEntry": false,
      "cwd": "${workspaceFolder}/${env:BUILD_TARGET}",
      "environment": [],
      "externalConsole": false,
      "MIMode": "gdb",
      "setupCommands": [
          {
              "description": "Enable pretty-printing for gdb",
              "text": "-enable-pretty-printing",
              "ignoreFailures": true
          }
      ],
      "preLaunchTask": "",
      "miDebuggerPath": "/usr/bin/gdb"
    }
  ],
  "inputs": [
    {
      "id": "pickDeviceModel",
      "description": "Select device model to generate code for",
      "type": "pickString",
      "options": ["common/examples/start_here/device.start_here.json", 
                  "common/examples/use_structs/device.use_structs.json",
                  "common/examples/use_templates/device.use_templates.json",
                  "common/examples/use_constraints/device.use_constraints.json",
                  "common/examples/use_struct_arrays/device.AudioDeck.json",
                  "common/examples/import_params/device.import_params.json",
                  "common/examples/use_variants/device.use_variants.json",
                  "connections/gRPC/examples/external_object_request/device.external_object_request.json",
                  "connections/gRPC/examples/one_of_everything/device.one_of_everything.yaml",
                  "connections/gRPC/examples/status_update/device.status_update.json",
                  "connections/gRPC/examples/structs_with_authz/device.AudioDeck.json",
                  "connections/gRPC/examples/structs_with_authz_yaml/device.AudioDeck.yaml",
                  "connections/gRPC/examples/use_commands/device.video_player.json",
                  "connections/gRPC/examples/use_menus/device.use_menus.json"
                ],
      "default": "common/examples/start_here/device.start_here.json"
    },
    {
      "id": "pickService",
      "description": "Select service to run",
      "type": "pickString",
      "options": ["status_update",
                  "external_object_request",
                  "structs_with_authz",
                  "structs_with_authz_yaml",
                  "use_commands",
                  "one_of_everything"
                ],
      "default": "status_update"
    },
    {
      "id": "pickExample",
      "description": "Select example to run",
      "type": "pickString",
      "options": ["common/examples/enum_decorator/enum_decorator",
                  "common/examples/factory/factory",
                  "common/examples/hello_world/hello_world",
                  "common/examples/import_params/import_params",
                  "common/examples/path/path",
                  "common/examples/use_constraints/use_constraints",
                  "common/examples/use_struct_arrays/use_struct_arrays",
                  "common/examples/use_structs/use_structs",
                  "common/examples/use_templates/use_templates",
                  "common/examples/use_variants/use_variants"
                ],
      "default": "common/examples/hello_world/hello_world"
    },
    {
      "id": "pickTestExecutable",
      "description": "Select test executable to debug",
      "type": "pickString",
      "options": [
        "unittests/common/common_Authorizer_test",
        "unittests/common/common_utils_test",
        "unittests/common/common_Connect_test",
        "unittests/common/common_LanguagePack_test",
        "unittests/common/common_Path_test",
        "unittests/common/common_PolyglotText_test",
        "unittests/common/common_StructInfo_test",
        "unittests/common/common_ChoiceConstraint_test",
        "unittests/common/common_Device_test",
        "unittests/common/common_MenuGroup_test",
        "unittests/common/common_ParamWithValue",
        "unittests/common/common_SubscriptionManager_test",
        "unittests/common/common_ConnectionQueue_test",
        "unittests/common/common_RangeConstraint_test",
        "unittests/common/common_ParamDescriptor_test",
        "unittests/common/common_Menu_test",
        "unittests/common/common_ParamVisitor_test",
        "unittests/gRPC/gRPC_ParamInfoRequest_test",
        "unittests/gRPC/gRPC_UpdateSubscriptions_test",
        "unittests/gRPC/gRPC_DeviceRequest_test",
        "unittests/gRPC/gRPC_GetPopulatedSlots_test",
        "unittests/gRPC/gRPC_GetParam_test",
        "unittests/gRPC/gRPC_LanguagePackRequest_test",
        "unittests/gRPC/gRPC_AddLanguage_test",
        "unittests/gRPC/gRPC_ServiceImpl_test",
        "unittests/gRPC/gRPC_ExecuteCommand_test",
        "unittests/gRPC/gRPC_Connect_test",
        "unittests/gRPC/gRPC_SetValue_test",
        "unittests/gRPC/gRPC_ListLanguages_test",
        "unittests/gRPC/gRPC_MultiSetValue_test",
        "unittests/gRPC/gRPC_GetValue_test",
        "unittests/REST/REST_GetValue_test",
        "unittests/REST/REST_SetValue_test",
        "unittests/REST/REST_ExecuteCommand_test",
        "unittests/REST/REST_SocketReader_test",
        "unittests/REST/REST_DeviceRequest_test",
        "unittests/REST/REST_GetPopulatedSlots_test",
        "unittests/REST/REST_ServiceImpl_test",
        "unittests/REST/REST_Languages_test",
        "unittests/REST/REST_GetParam_test",
        "unittests/REST/REST_MultiSetValue_test",
        "unittests/REST/REST_ParamInfoRequest_test",
        "unittests/REST/REST_Connect_test",
        "unittests/REST/REST_SocketWriter_test",
        "unittests/REST/REST_AssetRequest_test",
        "unittests/REST/REST_LanguagePack_test",
        "unittests/REST/REST_Subscriptions_test",
      ],
      "default": "unittests/common/tests/common_unit_tests"
    },
    {
      "id": "pickRestService",
      "description": "Select REST service to debug",
      "type": "pickString",
      "options": [
                //"api_only", // unimplemented
        "asset_request_REST",
        "status_update_REST",
        "status_update_JSON_REST",
        "use_commands_REST",
        "use_menus_REST",
        "structs_with_authz_REST",
        "one_of_everything_REST"
      ],
      "default": "status_update_REST"
    }
  ]

}
