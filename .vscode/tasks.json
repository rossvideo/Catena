{
    "tasks": [
        {
            "type": "cppbuild",
            "label": "C/C++: clang++ build active file",
            "command": "/usr/bin/clang++",
            "args": [
                "-fcolor-diagnostics",
                "-fansi-escape-codes",
                "-g",
                "${file}",
                "-o",
                "${fileDirname}/${fileBasenameNoExtension}"
            ],
            "options": {
                "cwd": "${fileDirname}"
            },
            "problemMatcher": [
                "$gcc"
            ],
            "group": {
                "kind": "build",
                "isDefault": true
            },
            "detail": "Task generated by Debugger."
        },

        {
            "label": "Generate Coverage",
            "type": "shell",
            "command": "cd ${workspaceFolder} && ./scripts/run_coverage.sh",
            "group": {
                "kind": "build",
                "isDefault": true
            },
            "problemMatcher": []
        },
        {
            "label": "Generate Coverage with HTML",
            "type": "shell",
            "command": "cd ${workspaceFolder} && ./scripts/run_coverage.sh --html && cd coverage && echo 'Starting server...' && echo 'Coverage report available at: http://0.0.0.0:8000/index.html' && echo 'Press Ctrl+C to stop the server' && python3 -m http.server 8000",
            "group": {
                "kind": "build",
                "isDefault": true
            },
            "problemMatcher": [],
            "presentation": {
                "reveal": "always",
                "panel": "shared",
                "echo": true,
                "focus": true
            },
            "isBackground": true
        },
        {
            "label": "Run Ninja",
            "type": "shell",
            "command": "cd ${workspaceFolder}/${env:BUILD_TARGET} && ninja",
            "group": {
                "kind": "build",
                "isDefault": true
            },
            "problemMatcher": []
        },
        {
            "label": "Fresh Build",
            "type": "shell",
            // Command breakdown:
            // 1. If build.ninja exists in the build target directory:
            //    - Change to build target directory
            //    - Run ninja clean to clean the build
            // 2. If build target directory doesn't exist:
            //    - Create it
            // 3. Run CMake to generate build files with:
            //    - Ninja as the generator
            //    - Build type from CMAKE_BUILD_TYPE env var
            //    - Connections from CONNECTIONS env var
            //    - Install prefix set to /usr/local/.local
            //    - Coverage flags set for C++ and C
            // 4. Run ninja to build the project
            "command": "if [ -f ${workspaceFolder}/${env:BUILD_TARGET}/build.ninja ]; then (cd ${workspaceFolder}/${env:BUILD_TARGET} && ninja clean); fi && if [ ! -d ${workspaceFolder}/${env:BUILD_TARGET} ]; then mkdir -p ${workspaceFolder}/${env:BUILD_TARGET}; fi && cmake -G Ninja -DCMAKE_BUILD_TYPE=${env:CMAKE_BUILD_TYPE} -DCONNECTIONS=${env:CONNECTIONS} -DCMAKE_CXX_FLAGS=\"--coverage\" -DCMAKE_C_FLAGS=\"--coverage\" -DCMAKE_EXE_LINKER_FLAGS=\"--coverage\" -DCMAKE_INSTALL_PREFIX=/usr/local/.local -B ${workspaceFolder}/${env:BUILD_TARGET} ${workspaceFolder}/sdks/cpp && cd ${workspaceFolder}/${env:BUILD_TARGET} && ninja",
            "group": {
                "kind": "build",
                "isDefault": true
            },
            "problemMatcher": []
        }
    ],
    "version": "2.0.0"
}