# This struct contains examples of each constraint type within it's nested
# parameters.
type: STRUCT
name: { display_strings: { 
  en: "Constraint Examples", 
  fr: "Exemples de Contraintes", 
  es: "Ejemplos de Restricciones", 
  ja: "制約の例" } }
params:
  # INT_RANGE constraint example
  int32_range:
    import: { file: /constraints/param.int32_range.yaml }
  # INT_CHOICE constraint example
  int32_choice:
    import: { file: /constraints/param.int32_choice.yaml }
  # INT_ALARM constraint example [NOT YET IMPLEMENTED]
  # int32_alarm:
  #   import: { file: /constraints/param.int32_alarm.yaml }
  # FLOAT_RANGE constraint example
  float32_range:
    import: { file: /constraints/param.float32_range.yaml }
  # STRING_CHOICE constraint example
  string_choice:
    import: { file: /constraints/param.string_choice.yaml }
  # STRING_STRING_CHOICE constraint example
  string_string_choice:
    import: { file: /constraints/param.string_string_choice.yaml }
  # max_length example
  string_length:
    import: { file: /constraints/param.string_length.yaml }
  # INT_RANGE constraint example with an array
  int_array_range:
    import: { file: /constraints/param.int_array_range.yaml }
  # INT_CHOICE constraint example with an array
  int_array_choice:
    import: { file: /constraints/param.int_array_choice.yaml }
  # INT_ALARM constraint example with an array [NOT YET IMPLEMENTED]
  # int_array_alarm:
  #   import: { file: /constraints/param.int_array_alarm.yaml }
  # FLOAT_RANGE constraint example with an array
  float_array_range:
    import: { file: /constraints/param.float_array_range.yaml }
  # STRING_CHOICE constraint example with an array
  string_array_choice:
    import: { file: /constraints/param.string_array_choice.yaml }
  # STRING_ARRAY_CHOICE constraint example with an array
  string_string_array_choice:
    import: { file: /constraints/param.string_string_array_choice.yaml }
  # max_length and total_length example with an array
  string_array_length:
    import: { file: /constraints/param.string_array_length.yaml }
value: 
  struct_value:
    fields:
      int32_range: { int32_value: 6}
      int32_choice: { int32_value: 1 }
      # int32_alarm:{ int32_value: 0 }
      float32_range: { float32_value: 10.5 }
      string_choice: { string_value: "a" }
      string_string_choice: { string_value: "<#FF0000>" }
      string_length: { string_value: "Hello worl" }
      int_array_range: { int32_array_values: { ints: [0, 2, 4, 6, 8, 10] } }
      int_array_choice: { int32_array_values: { ints: [0, 1, 0, 0, 1] } }
      # int_array_alarm: { int32_array_values: { ints: [0, 1, 2, 3, 4] } }
      float_array_range: { float32_array_values: { floats: [11.5, 22.5, 33.5, 44.5] } }
      string_array_choice: { string_array_values: { strings: [a, b, a] } }
      string_array_length: { string_array_values: { strings: [a, b, c, d, e, f, g, h, i, j] } }
      string_string_array_choice: { string_array_values: { strings: ["<#FF0000>", "<#00FF00>", "<#0000FF>"]  } }