# For most projects, this workflow file will not need changing; you simply need
# to commit it to your repository.
#
# You may wish to alter this file to override the set of languages analyzed,
# or to provide custom queries or build logic.
#
# ******** NOTE ********
# We have attempted to detect the languages in your repository. Please check
# the `language` matrix defined below to confirm you have the correct set of
# supported CodeQL languages.
#

# For most projects, this workflow file will not need changing; you simply need
# to commit it to your repository.
#
# You may wish to alter this file to override the set of languages analyzed,
# or to provide custom queries or build logic.
#
# ******** NOTE ********
# We have attempted to detect the languages in your repository. Please check
# the `language` matrix defined below to confirm you have the correct set of
# supported CodeQL languages.
#
name: "CodeQL-CPP"

on:
  push:
    branches: [ "develop", "main"]
    paths:
      - 'sdks/cpp/**'
      - 'unittests/cpp/**'
  pull_request:
    branches: [ "develop", "main" ]
    paths:
      - 'sdks/cpp/**'
      - 'unittests/cpp/**'
  schedule:
    - cron: '25 16 * * 2'
  workflow_dispatch:

jobs:
  analyze:
    name: Analyze
    runs-on: ${{ (matrix.language == 'swift' && 'macos-latest') || 'ubuntu-latest' }}
    timeout-minutes: ${{ (matrix.language == 'swift' && 120) || 360 }}
    permissions:
      security-events: write
      actions: read
      contents: read

    strategy:
      fail-fast: false
      matrix:
        language: [ 'c-cpp' ]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    # Cache gRPC and Protobuf dependencies
    - name: Cache gRPC and Protobuf dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.local
        key: ${{ runner.os }}-grpc-protobuf-${{ hashFiles('**/grpc_version.txt') }}
        restore-keys: |
          ${{ runner.os }}-grpc-protobuf-

    - name: Install and Build gRPC and Protobufs
      run: |
        if [ ! -d "$HOME/.local/include/grpc" ]; then
          cd ~
          echo "Install and Build gRPC and Protobufs"
          export MY_INSTALL_DIR=$HOME/.local
          mkdir -p $MY_INSTALL_DIR
          export PATH="$MY_INSTALL_DIR/bin:$PATH"
          sudo apt install -y build-essential autoconf libtool pkg-config
          sudo apt-get install ninja-build
          git clone --recurse-submodules -b v1.62.0 --depth 1 --shallow-submodules https://github.com/grpc/grpc
          cd grpc
          mkdir -p cmake/build
          pushd cmake/build
          cmake -DgRPC_INSTALL=ON -DgRPC_BUILD_TESTS=OFF -DCMAKE_INSTALL_PREFIX=$MY_INSTALL_DIR -G Ninja ../..
          ninja
          sudo ninja install
          popd
        else
          echo "gRPC and Protobufs already installed, skipping build"
        fi

    # Cache gtest dependencies
    - name: Cache gtest dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.local/gtest
        key: ${{ runner.os }}-gtest-${{ hashFiles('**/gtest_version.txt') }}
        restore-keys: |
          ${{ runner.os }}-gtest-

    - name: Install and Build gtest
      run: |
        if [ ! -d "$HOME/.local/gtest" ]; then
          cd ~
          echo "Install and Build gtest"
          export MY_INSTALL_DIR=$HOME/.local/gtest
          mkdir -p $MY_INSTALL_DIR
          git clone https://github.com/google/googletest.git
          cd googletest
          mkdir build && cd build
          cmake -DCMAKE_INSTALL_PREFIX=$MY_INSTALL_DIR -G Ninja ..
          ninja
          ninja install
        else
          echo "gtest already installed, skipping build"
        fi

    - name: Install and Build glog
      run: |
        if [ ! -d "$HOME/.local/lib/glog" ]; then
          cd ~
          echo "Install and Build glog"
          sudo apt-get install -y libgoogle-glog-dev
        else
          echo "glog already installed, skipping build"
        fi

    # Cache jwt-cpp dependencies
    - name: Cache jwt-cpp dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.local/lib
        key: ${{ runner.os }}-jwt-cpp-${{ hashFiles('**/jwt-cpp_version.txt') }}
        restore-keys: |
          ${{ runner.os }}-jwt-cpp-

    - name: Install and Build jwt-cpp
      run: |
        if [ ! -d "$HOME/.local/include/jwt-cpp" ]; then
          cd ~
          echo "Install and Build jwt-cpp"
          sudo apt-get install libssl-dev
          git clone https://github.com/Thalhammer/jwt-cpp && cd jwt-cpp && mkdir build && cd build && \
          cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_POLICY_VERSION_MINIMUM=3.5 -G Ninja .. && \
          ninja && sudo ninja install
        else
          echo "jwt-cpp already installed, skipping build"
        fi

    # Initialize git submodules
    - name: Initialize git submodules
      run: |
        cd ${{ github.workspace }}
        git submodule update --init --recursive

    # Cache Codegen dependencies
    - name: Cache Codegen dependencies
      uses: actions/cache@v3
      with:
        path: |
          ./work/Catena/Catena/tools/codegen/node_modules
        key: ${{ runner.os }}-codegen-${{ hashFiles('**/work/Catena/Catena/tools/codegen/package.json') }}
        restore-keys: |
          ${{ runner.os }}-codegen-

    - name: Install Codegen
      run: |
        if [ ! -d "./work/Catena/Catena/tools/codegen/node_modules" ]; then
          cd ~
          cd ./work/Catena/Catena/tools/codegen
          echo "Install Codegen"
          npm install
        else
          echo "Codegen dependencies already installed, skipping npm install"
        fi

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
        debug: true

    - name: Scan cpp sdk with CodeQL
      run: |
        echo "Run, Build Application using Ninja"
        cd ~
        cd ./work/Catena/Catena/
        mkdir -p build/cpp
        cd build/cpp
        cmake -DUNIT_TESTING=OFF -DBUILD_DOC=OFF -DCONNECTIONS=gRPC -DCATENA_MODEL="lite" -G Ninja -DGLOG_LOGGING_DIR=${HOME}/Catena/logs -B ~/work/Catena/Catena/build/cpp -S ~/work/Catena/Catena/sdks/cpp
        ninja

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:${{matrix.language}}"

    - name: Upload error and fatal logs on failure
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: error-logs
        path: |
          logs/*error*.log
          logs/*fatal*.log
        if-no-files-found: ignore
        retention-days: 1