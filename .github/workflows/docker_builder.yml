#
name: Create and publish a Docker images

# Configures this workflow to run every time a change is pushed to the branch called `release`.
on:
  push:
    branches: ['develop', 'main', 'example-containers']

# Defines two custom environment variables for the workflow. These are used for the Container registry domain, and a name for the Docker image that this workflow builds.
env:
  REGISTRY: ghcr.io
  

# There is a single job in this workflow. It's configured to run on the latest available version of Ubuntu.
jobs:
  build-and-push-toolchain-cpp:
    runs-on: ubuntu-latest
    env:
      IMAGE_NAME: catena-toolchain-cpp
    # Sets the permissions granted to the `GITHUB_TOKEN` for the actions in this job.
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
      #
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      # Uses the `docker/login-action` action to log in to the Container registry registry using the account and password that will publish the packages. Once published, the packages are scoped to the account defined here.
      - name: Log in to the Container registry
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # This step uses [docker/metadata-action](https://github.com/docker/metadata-action#about) to extract tags and labels that will be applied to the specified image. The `id` "meta" allows the output of this step to be referenced in a subsequent step. The `images` value provides the base name for the tags and labels.
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: ${{ env.REGISTRY }}/rossvideo/${{ env.IMAGE_NAME }}

      - name: Print stuff
        run: |
          echo "IMAGE_NAME: ${{ env.IMAGE_NAME }}"
          echo "REGISTRY: ${{ env.REGISTRY }}"
          echo "tags: ${{ env.REGISTRY }}/rossvideo/${{ env.IMAGE_NAME }}:latest"
          echo "labels: ${{ steps.meta.outputs.labels }}"

      - name: copy env file
        run: |
          cp .devcontainer/toolchain-cpp.env toolchain-cpp.env

      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@f2a1d5e99d037542a71f64918e516c093c6f3fc4
        with:
          context: .
          file: .devcontainer/toolchain-cpp.dockerfile
          push: true
          tags: "${{ env.REGISTRY }}/rossvideo/${{ env.IMAGE_NAME }}:latest"
          labels: ${{ steps.meta.outputs.labels }}
      
      # This step generates an artifact attestation for the image, which is an unforgeable statement about where and how it was built. It increases supply chain security for people who consume the image. For more information, see [Using artifact attestations to establish provenance for builds](/actions/security-guides/using-artifact-attestations-to-establish-provenance-for-builds).
      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v2
        with:
          subject-name: ${{ env.REGISTRY }}/rossvideo/${{ env.IMAGE_NAME}}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true
      
  build-and-push-catena:
    runs-on: ubuntu-latest
    env:
      IMAGE_NAME: catena
    # Sets the permissions granted to the `GITHUB_TOKEN` for the actions in this job.
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
      #
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      # Uses the `docker/login-action` action to log in to the Container registry registry using the account and password that will publish the packages. Once published, the packages are scoped to the account defined here.
      - name: Log in to the Container registry
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # This step uses [docker/metadata-action](https://github.com/docker/metadata-action#about) to extract tags and labels that will be applied to the specified image. The `id` "meta" allows the output of this step to be referenced in a subsequent step. The `images` value provides the base name for the tags and labels.
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: ${{ env.REGISTRY }}/rossvideo/${{ env.IMAGE_NAME }}

      - name: Print stuff
        run: |
          echo "IMAGE_NAME: ${{ env.IMAGE_NAME }}"
          echo "REGISTRY: ${{ env.REGISTRY }}"
          echo "tags: ${{ env.REGISTRY }}/rossvideo/${{ env.IMAGE_NAME }}:latest"
          echo "labels: ${{ steps.meta.outputs.labels }}"

      - name: copy env file
        run: |
          cp .devcontainer/devcontainer.env devcontainer.env

      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@f2a1d5e99d037542a71f64918e516c093c6f3fc4
        with:
          context: .
          file: .devcontainer/devcontainer.dockerfile
          push: true
          tags: "${{ env.REGISTRY }}/rossvideo/${{ env.IMAGE_NAME }}:latest"
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            IMAGE_TITLE="Catena Development Container"
            IMAGE_DESCRIPTION="Development container for Catena"
            IMAGE_VERSION="1.0.0"
            IMAGE_VENDOR="Ross Video"
            CMAKE_BUILD_TYPE=Debug
            CONNECTIONS='gRPC;REST'
            BUILD_TARGET=build/cpp
        
      
      # This step generates an artifact attestation for the image, which is an unforgeable statement about where and how it was built. It increases supply chain security for people who consume the image. For more information, see [Using artifact attestations to establish provenance for builds](/actions/security-guides/using-artifact-attestations-to-establish-provenance-for-builds).
      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v2
        with:
          subject-name: ${{ env.REGISTRY }}/rossvideo/${{ env.IMAGE_NAME}}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true
      
  build-and-push-examples:
    runs-on: ghcr.io/rossvideo/catena-toolchain-cpp:latest
    env:
      BUILD_TARGET: build/cpp
      CMAKE_INSTALL_PREFIX: /usr/local/.local
      CONNECTIONS: gRPC;REST
      WORKDIR: /app
    permissions:
      contents: read
      packages: write
      attestations: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to the Container registry
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Build examples
        run: |
          mkdir -p ${WORKDIR}/${BUILD_TARGET}
          cd ${WORKDIR}/${BUILD_TARGET} \
          cmake -G Ninja -DCONNECTIONS=${CONNECTIONS} -DUNIT_TESTING=off \
            -DCMAKE_INSTALL_PREFIX=${CMAKE_INSTALL_PREFIX} \
            -DGLOG_LOGGING_DIR=${WORKDIR}/logs \
            -B ${WORKDIR}/${BUILD_TARGET} ${WORKDIR}/sdks/cpp

      - name: Build the docker images for each example
        run: |
          pwd
          for CONN in ${CONNECTIONS//;/ }; do
            echo "Building examples for connection: $CONN"
            for EXAMPLE in connections/${CONN}/examples/*; do
              # Skip CMakeFiles directories and *.cmake files
              if [[ "$(basename "$EXAMPLE")" == "CMakeFiles" ]] || [[ "$EXAMPLE" == *.cmake ]]; then
                continue
              fi
              echo "Building example: $EXAMPLE"
              EXAMPLE_NAME=$(basename "$EXAMPLE")
              TAG="ghcr.io/rossvideo/catena:$CONN-$EXAMPLE_NAME"
              EXAMPLE_PATH=$WORKDIR/$BUILD_TARGET/$EXAMPLE/$EXAMPLE_NAME
              echo "docker build -t $TAG -f $WORKDIR/docker/example.dockerfile . --build-arg EXAMPLE=$EXAMPLE_PATH"
            done
          done
