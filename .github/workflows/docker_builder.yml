#
name: Create and publish a Docker images

# Configures this workflow to run every time a change is pushed to the branch called `release`.
on:
  push:
    branches: ['develop', 'main', 'example-containers']

# Defines two custom environment variables for the workflow. These are used for the Container registry domain, and a name for the Docker image that this workflow builds.
env:
  REGISTRY: ghcr.io
  CMAKE_INSTALL_PREFIX: /usr/local/.local
  CONNECTIONS: gRPC;REST
  BUILD_TARGET: build/cpp
  WORKDIR: /app
  

# There is a single job in this workflow. It's configured to run on the latest available version of Ubuntu.
jobs:
  # build-and-push-toolchain-cpp:
  #   runs-on: ubuntu-latest
  #   env:
  #     IMAGE_NAME: catena-toolchain-cpp
  #   # Sets the permissions granted to the `GITHUB_TOKEN` for the actions in this job.
  #   permissions:
  #     contents: read
  #     packages: write
  #     attestations: write
  #     id-token: write
  #     #
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v4
  #     # Uses the `docker/login-action` action to log in to the Container registry registry using the account and password that will publish the packages. Once published, the packages are scoped to the account defined here.
  #     - name: Log in to the Container registry
  #       uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
  #       with:
  #         registry: ${{ env.REGISTRY }}
  #         username: ${{ github.actor }}
  #         password: ${{ secrets.GITHUB_TOKEN }}

  #     # This step uses [docker/metadata-action](https://github.com/docker/metadata-action#about) to extract tags and labels that will be applied to the specified image. The `id` "meta" allows the output of this step to be referenced in a subsequent step. The `images` value provides the base name for the tags and labels.
  #     - name: Extract metadata (tags, labels) for Docker
  #       id: meta
  #       uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
  #       with:
  #         images: ${{ env.REGISTRY }}/rossvideo/${{ env.IMAGE_NAME }}

  #     - name: Print stuff
  #       run: |
  #         echo "IMAGE_NAME: ${{ env.IMAGE_NAME }}"
  #         echo "REGISTRY: ${{ env.REGISTRY }}"
  #         echo "tags: ${{ env.REGISTRY }}/rossvideo/${{ env.IMAGE_NAME }}:latest"
  #         echo "labels: ${{ steps.meta.outputs.labels }}"

  #     - name: copy env file
  #       run: |
  #         cp .devcontainer/toolchain-cpp.env toolchain-cpp.env

  #     - name: Build and push Docker image
  #       id: push
  #       uses: docker/build-push-action@f2a1d5e99d037542a71f64918e516c093c6f3fc4
  #       with:
  #         context: .
  #         file: .devcontainer/toolchain-cpp.dockerfile
  #         push: true
  #         tags: "${{ env.REGISTRY }}/rossvideo/${{ env.IMAGE_NAME }}:latest"
  #         labels: ${{ steps.meta.outputs.labels }}
      
  #     # This step generates an artifact attestation for the image, which is an unforgeable statement about where and how it was built. It increases supply chain security for people who consume the image. For more information, see [Using artifact attestations to establish provenance for builds](/actions/security-guides/using-artifact-attestations-to-establish-provenance-for-builds).
  #     - name: Generate artifact attestation
  #       uses: actions/attest-build-provenance@v2
  #       with:
  #         subject-name: ${{ env.REGISTRY }}/rossvideo/${{ env.IMAGE_NAME}}
  #         subject-digest: ${{ steps.push.outputs.digest }}
  #         push-to-registry: true
      
  # build-and-push-catena:
  #   runs-on: ubuntu-latest
  #   env:
  #     IMAGE_NAME: catena
  #   # Sets the permissions granted to the `GITHUB_TOKEN` for the actions in this job.
  #   permissions:
  #     contents: read
  #     packages: write
  #     attestations: write
  #     id-token: write
  #     #
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v4
  #     # Uses the `docker/login-action` action to log in to the Container registry registry using the account and password that will publish the packages. Once published, the packages are scoped to the account defined here.
  #     - name: Log in to the Container registry
  #       uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
  #       with:
  #         registry: ${{ env.REGISTRY }}
  #         username: ${{ github.actor }}
  #         password: ${{ secrets.GITHUB_TOKEN }}

  #     # This step uses [docker/metadata-action](https://github.com/docker/metadata-action#about) to extract tags and labels that will be applied to the specified image. The `id` "meta" allows the output of this step to be referenced in a subsequent step. The `images` value provides the base name for the tags and labels.
  #     - name: Extract metadata (tags, labels) for Docker
  #       id: meta
  #       uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
  #       with:
  #         images: ${{ env.REGISTRY }}/rossvideo/${{ env.IMAGE_NAME }}

  #     - name: Print stuff
  #       run: |
  #         echo "IMAGE_NAME: ${{ env.IMAGE_NAME }}"
  #         echo "REGISTRY: ${{ env.REGISTRY }}"
  #         echo "tags: ${{ env.REGISTRY }}/rossvideo/${{ env.IMAGE_NAME }}:latest"
  #         echo "labels: ${{ steps.meta.outputs.labels }}"

  #     - name: copy env file
  #       run: |
  #         cp .devcontainer/devcontainer.env devcontainer.env

  #     - name: Build and push Docker image
  #       id: push
  #       uses: docker/build-push-action@f2a1d5e99d037542a71f64918e516c093c6f3fc4
  #       with:
  #         context: .
  #         file: .devcontainer/devcontainer.dockerfile
  #         push: true
  #         tags: "${{ env.REGISTRY }}/rossvideo/${{ env.IMAGE_NAME }}:latest"
  #         labels: ${{ steps.meta.outputs.labels }}
  #         build-args: |
  #           IMAGE_TITLE="Catena Development Container"
  #           IMAGE_DESCRIPTION="Development container for Catena"
  #           IMAGE_VERSION="1.0.0"
  #           IMAGE_VENDOR="Ross Video"
  #           CMAKE_BUILD_TYPE=Debug
  #           CONNECTIONS='gRPC;REST'
  #           BUILD_TARGET=build/cpp
        
      
  #     # This step generates an artifact attestation for the image, which is an unforgeable statement about where and how it was built. It increases supply chain security for people who consume the image. For more information, see [Using artifact attestations to establish provenance for builds](/actions/security-guides/using-artifact-attestations-to-establish-provenance-for-builds).
  #     - name: Generate artifact attestation
  #       uses: actions/attest-build-provenance@v2
  #       with:
  #         subject-name: ${{ env.REGISTRY }}/rossvideo/${{ env.IMAGE_NAME}}
  #         subject-digest: ${{ steps.push.outputs.digest }}
  #         push-to-registry: true
  
  build-examples:
    runs-on: ubuntu-latest
    # needs: build-and-push-toolchain-cpp
    outputs:
      examples: ${{ steps.generate-matrix.outputs.examples }}
    container:
      image: ghcr.io/rossvideo/catena-toolchain-cpp:latest
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
      volumes:
        # env context does not work here, that's really DUMB
        - ${{ github.workspace }}:/app
      env:
        BUILD_TARGET: build/cpp
        CMAKE_INSTALL_PREFIX: /usr/local/.local
        CONNECTIONS: gRPC;REST
        WORKDIR: /app

    permissions:
      contents: read
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Build examples
        run: |
          mkdir -p ${WORKDIR}/${BUILD_TARGET}
          cd ${WORKDIR}/${BUILD_TARGET}
          pwd
          cmake -G Ninja -DCONNECTIONS=${CONNECTIONS} -DUNIT_TESTING=off \
            -DCMAKE_INSTALL_PREFIX=${CMAKE_INSTALL_PREFIX} \
            -DGLOG_LOGGING_DIR=${WORKDIR}/logs \
            -B ${WORKDIR}/${BUILD_TARGET} ${WORKDIR}/sdks/cpp
          ninja
          # copy the built examples to a directory for packaging
          EXAMPLES_DIR=$WORKDIR/examples
          mkdir -p $EXAMPLES_DIR
          for CONN in ${CONNECTIONS//;/ }; do
            echo "Building examples for connection: $CONN"
            mkdir -p $EXAMPLES_DIR/$CONN
            for EXAMPLE in connections/${CONN}/examples/*; do
              # Skip CMakeFiles directories and *.cmake files
              if [[ "$(basename "$EXAMPLE")" == "CMakeFiles" ]] || [[ "$EXAMPLE" == *.cmake ]]; then
              continue
              fi
              echo "Grabbing example: $EXAMPLE"
              EXAMPLE_NAME=$(basename "$EXAMPLE")
              cp $EXAMPLE/$EXAMPLE_NAME $EXAMPLES_DIR/$CONN/$EXAMPLE_NAME
            done
          done

      - name: Save examples as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: examples
          path: ${{ github.workspace }}/examples
          retention-days: 2
      
      - name: Generate matrix for example builds
        id: generate-matrix
        run: |
            EXAMPLES_JSON=$(find $WORKDIR/examples -type f -executable -printf '"%P",')
            EXAMPLES_JSON="[${EXAMPLES_JSON%,}]"
            echo "examples=${EXAMPLES_JSON}" >> $GITHUB_OUTPUT

  build-and-push-examples:
    runs-on: ubuntu-latest
    needs: build-examples
    strategy:
      matrix:
        example: ${{ fromJson(needs.build-examples.outputs.examples) }}
    permissions:
      contents: read
      packages: write
      attestations: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          sparse-checkout: docker

      - name: Download examples
        uses: actions/download-artifact@v4
        with:
          name: examples

      - name: Log in to the Container registry
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # This step uses [docker/metadata-action](https://github.com/docker/metadata-action#about) to extract tags and labels that will be applied to the specified image. The `id` "meta" allows the output of this step to be referenced in a subsequent step. The `images` value provides the base name for the tags and labels.
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: ${{ env.REGISTRY }}/rossvideo/catena-${{ matrix.example }}
          labels: |
            org.opencontainers.image.title=Catena ${{ matrix.example }}
            org.opencontainers.image.description=Self contained example for Catena ${{ matrix.example }}
            org.opencontainers.image.vendor=Ross Video

      - name: Print stuff
        run: |
          echo "tags: ${{ steps.meta.outputs.tags }}"
          echo "labels: ${{ steps.meta.outputs.labels }}"
          find .
      
      - name: build image for ${{ matrix.example }}
        uses: docker/build-push-action@f2a1d5e99d037542a71f64918e516c093c6f3fc4
        with:
          context: .
          file: docker/example.dockerfile
          # push: true
          build-args: |
            EXAMPLE=./examples/${{ matrix.example }}
            WORKDIR=${{ env.WORKDIR }}

