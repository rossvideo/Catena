#
# Copyright 2024 Ross Video Ltd
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
# this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice,
# this list of conditions and the following disclaimer in the documentation
# and/or other materials provided with the distribution.
#
# 3. Neither the name of the copyright holder nor the names of its contributors
# may be used to endorse or promote products derived from this software without
# specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS”
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, 
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#



name: Update the Repository C++ Version when updates to the C++ SDK are pushed to main

on:
  push:
    branches:
      - main
    paths:
      - 'sdks/cpp/**'
      - '.github/workflows/cpp_tagger.yml'


jobs:

  # job to detect automated commits generated by this action and
  # avoid an infinite loop by skipping the version update
  check-conditions:
    runs-on: ubuntu-latest
    outputs:
      skip: ${{ steps.check-skip.outputs.skip }}

    steps:
      # Step 1: Check out the repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Check if this is an automated commit
      - name: Check if this is an automated commit
        id: check-skip
        run: |
          LAST_COMMIT_MESSAGE=$(git log -1 --pretty=%B)
          if [[ "$LAST_COMMIT_MESSAGE" == *"[bot]"* ]]; then
            echo "::set-output name=skip::true"
          else
            echo "::set-output name=skip::false"
          fi

  # job to update the version number and create a PR with an updated VERSION.txt
  update-version:
    needs: check-conditions
    # Only proceed if the check-conditions job did not set the skip output to true
    if: ${{ needs.check-conditions.outputs.skip != 'true' }}
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out the repository, pull all the tags
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
    
      # Step 2: Generate new version number
      - name: Generate new version number
        run: |
          # Get the latest tag or default to "cpp-v0.0.0"
          TAG=$(git describe --tags --match "cpp-*" --abbrev=0 2>/dev/null || echo "cpp-v0.0.0")
          echo "Latest tag: $TAG"

          # Decompose the tag into its components
          VERSION=${TAG#cpp-}

          # Extract the version part before the last dash
          VERSION_PART=$(echo "$VERSION" | cut -d'-' -f1)

          # Remove the 'v' prefix if it exists
          VERSION_PART=${VERSION_PART#v}

          # Split the version part into MAJOR, MINOR, and PATCH
          IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION_PART"
          echo "Current version: $MAJOR.$MINOR.$PATCH"

          # Increment the patch number
          PATCH=$((PATCH + 1))

          # Get the commit count
          COMMIT_COUNT=$(git rev-list --count $(git describe --tags --match "cpp-*" --abbrev=0)..main || echo 0) || echo 0
          echo "Commit count: $COMMIT_COUNT"

          NEW_VERSION="cpp-v$MAJOR.$MINOR.$PATCH-$COMMIT_COUNT"

          # Save the new version number
          echo "VERSION=${NEW_VERSION}" >> $GITHUB_ENV
          echo "Generated new version number: $NEW_VERSION"
      
      # Step 4: Tag the repository with the new version number, and update VERSION.txt
      - name: Tag the repository with the new version number
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          git tag -a $VERSION -m "Version $VERSION"
          git push origin $VERSION
          echo "$VERSION-$(date +%s)" > sdks/cpp/VERSION.txt
      
      # Step 5: Create a PR
      - name: Create a PR
        uses: peter-evans/create-pull-request@v7
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: Update the C++ SDK version [bot]
          title: Update the C++ SDK version
          body: |
            This PR updates the C++ SDK version to $VERSION
          branch: update-version-${{ env.VERSION }}
          delete-branch: false
          labels: version-update
          base: main



# end